= Build caide in CentOS 7

The purpose of this guide is to build a single executable compatible with as
many Linux distributions as possible. To this end, we need to:

* Link all libraries except for glibc and libgcc statically.
* Build on a system with an old-ish glibc (CentOS 7).


== 1. Install CentOS 7
You can download installation media for your architecture
https://wiki.centos.org/Download[here]. Minimal image is
sufficient as we will install all prerequisites ourselves.

Create a non-root user `build` with password `build` during installation.  Add
the user to sudoers.


== 2. Install prerequisites

We will use Nix to install newer version of some software.

[source,bash]
sudo yum install wget tar xz bzip2 git gnupg python perl make automake gcc gcc-c++
sudo yum install libmpc-devel mpfr-devel gmp-devel zlib-devel libffi zlib zlib-static gmp-static
wget https://nixos.org/nix/install
bash install
. ~/.bash_profile
nix-env -i cmake


== 3. Install newer g++

[source,bash]
wget https://ftp.gnu.org/gnu/gcc/gcc-8.1.0/gcc-8.1.0.tar.gz
tar -xf gcc-8.1.0.tar.gz
cd gcc-8.1.0
./configure --with-system-zlib --disable-multilib --without-isl --enable-languages=c,c++
make
sudo make install


== 4. Install stack

[source,bash]
wget -O install-stack.sh https://get.haskellstack.org/
sh install-stack.sh

Or, alternatively,

[source,bash]
nix-env -i stack


== 5. Setup build environment

Add paths to C and C++ compilers in `~/.bashrc`:

[source,bash]
export CC=/usr/local/bin/gcc
export CXX=/usr/local/bin/g++
#export CXXFLAGS=-static-libstdc++
export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:$LD_LIBRARY_PATH

Create the file `~/.stack/config.yaml` with the following contents:

[source,yaml]
build:
    split-objs: true

This will reduce the size of the final executable a little. +
Copy the file
link:../../ghc-linker.py[`ghc-linker.py`] to some place in your `PATH` (for
example, to `~/bin`). We will use this script as a linker because this is the
only way to supply the link options that we need.

Log out and log back in.


== 6. Download source code and build

[source,bash]
cd ~
git clone -b master https://github.com/slycelote/caide
cd caide
git submodule update --init --recursive
cd libcaide
stack init
stack setup
stack build --ghc-options '-pgml ghc-linker.py'

The resulting executable is at `.stack-work/install/**/bin/caide`.


== 7. Run tests

For some of the tests, mono compiler and phantomjs are required:

[source,bash]
nix-env -i mono
sudo yum install fontconfig
wget https://bitbucket.org/ariya/phantomjs/downloads/phantomjs-2.1.1-linux-$(uname -m).tar.bz2
tar -xf phantomjs*
mv phantomjs*/bin/phantomjs ~/bin/

To run tests, execute:

[source,bash]
tests/run-tests.sh

